package Table;

import java.util.ArrayList;
import java.util.Random;

import Player.Player;

public class Table {
int dealerButton,sB,sBValue,bB,bBValue,maxBet;
int pot;
ArrayList<Player> players = new ArrayList<Player>();
ArrayList<Player> activePlayers = new ArrayList<Player>();
ArrayList<Card> communityCards = new ArrayList<Card>();
Deck deck=null;
int round;

public Table(ArrayList<Player> players,int sBValue,int bBValue)
{
	this.players=players;
	this.sBValue=sBValue;
	this.bBValue=bBValue;
	round=1;
}
public int game()
{
	while(players.size()>=2)
	{
		deck=new Deck();
		activePlayers=players;
		pot=0;
		deck.shuffling();
		deal();
		setButtons();
		betting((bB+1)%players.size());
		if(isEnd()==true)
		{
			nextRound();
			continue;
		}
		flop();
		betting(sB);
		if(isEnd()==true)
		{
			nextRound();
			continue;
		}
		//turn
		turnOrRiver();
		betting(sB);
		if(isEnd()==true)
		{
			nextRound();
			continue;
		}
		//river
		turnOrRiver();
		betting(sB);
		if(isEnd()==true)
		{
			nextRound();
			continue;
		}
		showCards();
		
		
}
	return 0;
}
private void showCards() {
	for(int j=0;j<activePlayers.size();j++)
	{
		activePlayers.get(j).showCards();
	}
	
}
private void turnOrRiver() {
	communityCards.add(deck.getCard());	
}
public void nextRound() {
	potToWinner(0);
	for(int j=0;j<players.size();j++)
	{
		if(players.get(j).getChips()==0)
		{
			players.remove(j);
		}
	}
	round++;
	deck=null;
}
private void flop() {
	communityCards.add(deck.getCard());
	communityCards.add(deck.getCard());
	communityCards.add(deck.getCard());
	// TODO wyslij karty do kazdego z graczy
}
private void potToWinner(int i) {
	players.get(i).setChips(players.get(i).getChips()+pot);	
}
private boolean isEnd() {
	if(activePlayers.size()<2)
		return true;
	return false;
}
private void betting(int i) {
	while(!endBetting())
	{
		int temp;
		temp=activePlayers.get(i).play(maxBet);
		if(temp==0)
		{
			activePlayers.remove(i);
		}
		else
		{
			pot=pot+temp;
			maxBet=temp;
			i=(i+1)%activePlayers.size();
		}
	}
	for(int j=0;j<activePlayers.size();j++)
	{
		activePlayers.get(j).setWasBet(false);
	}
}
private boolean endBetting() {
	for(int i=0;i<activePlayers.size();i++)
	{
		if((activePlayers.get(i).getBet()<maxBet) || !activePlayers.get(i).wasBet())
		{
			return false;
		}
	}
	if(maxBet==bBValue)return false;
	return true;
}
public void setButtons() {
	if(round==1)
	{
	int rnd =(new Random()).nextInt(players.size());
	dealerButton=rnd;
	}
	else{
		dealerButton=(dealerButton+1)%players.size();
	}
	sB=(dealerButton+1)%players.size();
	bB=(dealerButton+2)%players.size();
	
	players.get(sB).makeBet(sBValue);
	players.get(bB).makeBet(bBValue);
	pot=sBValue+bBValue;
	maxBet=bBValue;	
}
public void deal() {
	if(deck.deal(players.size(), 2)==true)
	{
		for(int i=0;i<players.size();i++)
		{
			players.get(i).setHand(deck.getHand(i));
		}
	}}
}

